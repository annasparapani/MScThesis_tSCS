%% TITLE: EMG data analysis for tSCS 
%  AUTHOR: Anna Sparpani
%  DATE: nov. 23
% The following code is used to analyse the EMG data acquired during
% transcutaneous spinal cord stimulation. The main interest of the signal
% analysis is the identification of the PRM reflex, which is observed
% around 50micros after the stimulation artefact on the EMG baseline. 

clear all 
close all
clc

%% Import data
% you have to be in the folder with the data!

[filename, pathname, filterindex] = uigetfile('*.mat', 'Pick a MATLAB  file');
load(filename)
EMG=[];
plots_on=0;

%% Format data into a time series 
for j = 1:12

    % EMGdata is a 3D matrix with 12 channels
    % for each channel take the 2D matrix of data [time,20]
    emg = squeeze(EMGdata.signals.values(j,:,:))';
    %sta is a column array with how many samples are stored in each vector
    %of 20 
    sta = EMGcount.signals.values(:,:);
    pp = EMGcount.time;

    si = size(emg);
    temp = [];
    temp2 = [];
    
    % create the vector of samples appending packages one after the other 
    for i = 1:si(1)
        if (sta(i) > 0)
        temp = [temp emg(i, 1:sta(i))];
        end
    end
    temp(end-(double(sta(end)-2)):end)=[];
    
    for i=1:si(1)-1
        if (sta(i) > 0)
        temp2=[temp2 linspace(pp(i),pp(i+1)-(0.01/(double(sta(i)))),sta(i))];
        end
    end
    EMG(:,j)=temp;
end

EMGok=[EMG(:,5),EMG(:,6),EMG(:,7),EMG(:,8),EMG(:,9),EMG(:,10),EMG(:,11),EMG(:,12)];
x=EMGok;

% Acquistion frequency EMG
Fs_EMG=1024;
time=0:1/Fs_EMG:length(EMGok)/Fs_EMG-1/Fs_EMG;

% Draw plots of raw data
if plots_on
    figure()
    title('RIGHT Leg')
    subplot(4,1,1), plot(time,x(:,1)), ylabel('Quad DX'), grid on %17
    subplot(4,1,2), plot(time,x(:,2)), ylabel('Ham DX'), grid on %18
    subplot(4,1,3), plot(time,x(:,3)), ylabel('Gast DX'), grid on %19
    subplot(4,1,4), plot(time,x(:,4)), ylabel('TA DX'), grid on %20
    
    figure()
    title('LEFT LEG')
    subplot(4,1,1), plot(time,x(:,5)), ylabel('Quad SX'), grid on %21
    subplot(4,1,2), plot(time,x(:,6)), ylabel('Ham SX'), grid on %22
    subplot(4,1,3), plot(time,x(:,7)), ylabel('Gast SX'), grid on %23
    subplot(4,1,4), plot(time,x(:,8)), ylabel('TA SX'), grid on %24
end 
%% Signal processing

% Filtering
fcutlow=10;   
fcuthigh=100;   
[z,p,k]=butter(4,[fcutlow,fcuthigh]/(Fs_EMG/2),'bandpass');
[sos,g]=zp2sos(z,p,k); %apply filter to signal
x_filt(:,:) = filtfilt(sos,g,x(:,:));
[b, a] = sos2tf(sos, g); % Extract coefficients
xfilter = filter(b, a, x_filt(:,:)); %apply filter
[pff,ff]=pwelch(xfilter(:,1),[],[],[],Fs_EMG);

% Filtered graphs
if plots_on
    figure()
    title('Right Leg')
    subplot(4,1,1), plot(time,xfilter(:,1)), ylabel('mV'), xlabel('s'), grid off, title(' DX Quad'); %17
    subplot(4,1,2), plot(time,xfilter(:,2)), ylabel('mV'),xlabel('s'), grid off, title('DX Hamstring'); %18
    subplot(4,1,3), plot(time,xfilter(:,3)), ylabel('mV'), xlabel('s'), grid off, title(' DX Gast'); %19
    subplot(4,1,4), plot(time,xfilter(:,4)), ylabel('mV'),xlabel('s'), grid off, title('DX TA'); %20
     
    figure()
    title('Left Leg')
    subplot(4,1,1), plot(time,xfilter(:,5)), ylabel('mV'), xlabel('s'), grid off, title('SX Quad'); %21
    subplot(4,1,2), plot(time,xfilter(:,6)), ylabel('mV'),xlabel('s'), grid off, title('SX Hamstring'); %22
    subplot(4,1,3), plot(time,xfilter(:,7)), ylabel('mV'), xlabel('s'), grid off, title('SX Gast'); %23
    subplot(4,1,4), plot(time,xfilter(:,8)), ylabel('mV'),xlabel('s'), grid off, title('SX TA'); %24
end
%% Peaks detection

% Finding the Min Peak Height for every muscle, based on the std deviation
% 1. Calculate standard deviation of the filtered signal
std_dev = std(xfilter);
% 2. Set a threshold as a multiple of the standard deviation
minPeakHeight_multiplier = 5; % You can adjust this multiplier, I kept it quite 
                          % high because the stimulation artefacts are much 
                          % higher than the rest of the signal
minPeakHeight = minPeakHeight_multiplier * std_dev;

meanPeakDistance=600; % mean peak distance 1200 = 0.6s 

% Right leg
[pk1,locs1] = findpeaks(xfilter(:,1),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,1));
 quad_dx=xfilter(:,1);
[pk2,locs2] = findpeaks(xfilter(:,2),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,2));
 hams_dx=xfilter(:,2);
[pk3,locs3] = findpeaks(xfilter(:,3),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,3));
gast_dx=xfilter(:,3);
[pk4,locs4] = findpeaks(xfilter(:,4),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,4));
ta_dx=xfilter(:,4);

% Left leg
[pk5,locs5] = findpeaks(xfilter(:,5),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,5));
  quad_sx=xfilter(:,5);
[pk6,locs6] = findpeaks(xfilter(:,6),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,6));
  hams_sx=xfilter(:,6);
[pk7,locs7] = findpeaks(xfilter(:,7),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,7));
  gast_sx=xfilter(:,7);
[pk8,locs8] = findpeaks(xfilter(:,8),"MinPeakDistance",meanPeakDistance,"MinPeakHeight",minPeakHeight(1,8));
  ta_sx=xfilter(:,8);

if plots_on
    figure()
    subplot(4,1,1), plot(quad_dx), hold on, plot (locs1,pk1,'o'), ylabel('mV'), title(' DX Quad');
    avg_value = mean(hams_dx(i,:));
    fill([1, length(hams_dx), length(hams_dx), 1], [avg_value + 0.025, avg_value + 0.025, avg_value - 0.025, avg_value - 0.025], 'y', 'EdgeColor', 'none', 'FaceAlpha', 0.3);
    
    subplot(4,1,2), plot(hams_dx), hold on, plot (locs2,pk2,'o'), ylabel('mV'), title(' DX Hams');
    subplot(4,1,3), plot(gast_dx), hold on, plot (locs3,pk3,'o'), ylabel('mV'), title(' DX Gast');
    subplot(4,1,4), plot(ta_dx), hold on, plot (locs4,pk4,'o'), ylabel('mV'), title(' DX TA');

    figure()
    title('Left Leg - filtered')
    subplot(4,1,1), plot(quad_sx), hold on, plot (locs5,pk5,'o'), ylabel('mV'), title(' SX Quad'); 
    subplot(4,1,2), plot(hams_sx), hold on, plot (locs6,pk6,'o'), ylabel('mV'), title(' SX Hams');
    subplot(4,1,3), plot(gast_sx), hold on, plot (locs7,pk7,'o'), ylabel('mV'), title(' SX Gast');
    subplot(4,1,4), plot(ta_sx), hold on, plot (locs8,pk8,'o'), ylabel('mV'), title(' SX TA');
end
%% M Waves detection based on zero crossing
%Right leg
Mwavestart_quadDx=findMwaveStart(quad_dx,locs1);
Mwavestart_hamDx=findMwaveStart(hams_dx,locs2);
Mwavestart_gastDx=findMwaveStart(gast_dx,locs3);
Mwavestart_taDx = findMwaveStart(ta_dx, locs4); 
% Left leg 
Mwavestart_quadSx=findMwaveStart(quad_sx,locs5);
Mwavestart_hamSx=findMwaveStart(hams_sx,locs6);
Mwavestart_gastSx=findMwaveStart(gast_sx,locs7);
Mwavestart_taSx = findMwaveStart(ta_sx, locs8); 

%% M waves detection and plot

duration_quad = 200; % ~100 ms
duration_hams = 200; %Federico usava 52 (50ms) 15ms di latenza + 35ms di Mwave (1024Hz*50ms=57samples)

% Right Leg M-wave
Mwaves1=buildMwave(Mwavestart_quadDx, duration_quad, quad_dx); 
Mwaves2=buildMwave(Mwavestart_hamDx, duration_hams, hams_dx); 
Mwaves3=buildMwave(Mwavestart_gastDx, duration_quad, gast_dx);
Mwaves4=buildMwave(Mwavestart_taDx, duration_hams, ta_dx);

%Left Leg M-wave
Mwaves5=buildMwave(Mwavestart_quadSx, duration_quad, quad_sx); 
Mwaves6=buildMwave(Mwavestart_hamSx, duration_hams, hams_sx); 
Mwaves7=buildMwave(Mwavestart_gastSx, duration_quad, gast_sx);
Mwaves8=buildMwave(Mwavestart_taSx, duration_hams, ta_sx);

% M-WAVES GRAPHS
if plots_on
    plotMwave("M wave Quad DX", Mwaves1, Fs_EMG);
    plotMwave("M wave Hams DX", Mwaves2, Fs_EMG);
    plotMwave("M wave Gast DX", Mwaves3, Fs_EMG);
    plotMwave("M wave TA DX", Mwaves4, Fs_EMG);
    plotMwave("M wave Quad SX", Mwaves5, Fs_EMG);
    plotMwave("M wave Hams SX", Mwaves6, Fs_EMG);
    plotMwave("M wave Gast SX", Mwaves7, Fs_EMG);
    plotMwave("M wave TA SX", Mwaves8, Fs_EMG);
end

%% Detection of M waves above threshold
% studio del riflesso PRM a valle del protocollo 1 e 2 che indichi il 
% valore di soglia motoria per gli 8 gruppi muscolari e la % di 
% depressione post-sinaptica nel caso del protocollo 2.

s=struct('W1',Mwaves1,'W2',Mwaves2,'W3',Mwaves3,'W4',Mwaves4,'W5', ...
    Mwaves5,'W6',Mwaves6,'W7',Mwaves7,'W8',Mwaves8);
% maxima 
M1=max(s.W1,[],2); M2=max(s.W2,[],2); M3=max(s.W3,[],2); M4=max(s.W4,[],2);
M5=max(s.W5,[],2); M6=max(s.W6,[],2); M7=max(s.W7,[],2); M8=max(s.W8,[],2);

% minima
m1=min(s.W1,[],2); m2=min(s.W2,[],2); m3=min(s.W3,[],2); m4=min(s.W4,[],2);
m5=min(s.W5,[],2); m6=min(s.W6,[],2); m7=min(s.W7,[],2); m8=min(s.W8,[],2);

%indici
n1=0; n2=0; n3=0; n4=0; n5=0; n6=0; n7=0; n8=0;

n1 = ((sum((M1-m1) >= 0.05))/length(m1))*100;
n2 = ((sum((M2-m2) >= 0.05))/length(m2))*100;
n3 = ((sum((M3-m3) >= 0.05))/length(m3))*100;
n4 = ((sum((M4-m4) >= 0.05))/length(m4))*100;
n5 = ((sum((M5-m5) >= 0.05))/length(m5))*100;
n6 = ((sum((M6-m6) >= 0.05))/length(m6))*100;
n7 = ((sum((M7-m7) >= 0.05))/length(m7))*100;
n8 = ((sum((M8-m8) >= 0.05))/length(m8))*100;


formatSpec1="N° of Mwave above 50uV is %4.2f/100 for Quad Dx\n";
formatSpec2="N° of Mwave above 50uV is %4.2f/100 for Hams Dx\n";
formatSpec3="N° of Mwave above 50uV is %4.2f/100 for Gast Dx\n";
formatSpec4="N° of Mwave above 50uV is %4.2f/100 for TA Dx\n\n";
formatSpec5="N° of Mwave above 50uV is %4.2f/100 for Quad Sx\n";
formatSpec6="N° of Mwave above 50uV is %4.2f/100 for Hams Sx\n";
formatSpec7="N° of Mwave above 50uV is %4.2f/100 for Gast Sx\n";
formatSpec8="N° of Mwave above 50uV is %4.2f/100 for TA Sx\n";

fprintf(formatSpec1,n1);
fprintf(formatSpec2,n2);
fprintf(formatSpec3,n3);
fprintf(formatSpec4,n4);
fprintf(formatSpec5,n5);
fprintf(formatSpec6,n6);
fprintf(formatSpec7,n7);
fprintf(formatSpec8,n8);

%% PAD Identification 

%% FUNCTIONS

function plotMwave(titleStr, MwaveArray, Frequency)
    % Function to plot the M wave
    timeArray= (0:1/Frequency:length(MwaveArray)/Frequency-1/Frequency)*1000; %ms
    figure;
    for i = 1:size(MwaveArray,1)
        if (rem(size(MwaveArray),10))~=0
            flag=1;
        else flag=0;
        end 
        subplot(fix(size(MwaveArray,1)/10)+flag, 10, i);
        plot(timeArray, MwaveArray(i,:),'LineWidth',1.2);
        title(titleStr);
        grid on;
        ylabel('mV');
        xlabel('time[ms]');
        
        % Calculate the average value
        avg_value = mean(MwaveArray(i,:));
        % Plot a band around the average value (±0.025)
        hold on;
        fill([timeArray, fliplr(timeArray)], [ones(size(timeArray))*(avg_value + 0.025), fliplr(ones(size(timeArray))*(avg_value - 0.025))], 'y', 'EdgeColor', 'none', 'FaceAlpha', 0.3);
        
        % Add a red horizontal line at y = 0.05
        hold on;
        yline(0.05, 'r', 'LineWidth', 1.5);

        % Set y-axis limits to maximum + 0.1
        ylim([min(MwaveArray(i,:)-0.1) max(MwaveArray(i,:))+0.1]) % y limit scaled to the graph values

        hold off;
    end
end

function Mwavestart = findMwaveStart(signal, locs)
% function to find the start of each Mwave after each stimulation artifact
% as a starting parameters it uses the zero crossing of the signal (before
% the zero crossing it's considered artefact, after that M wave) 
    Mwavestart = zeros(size(locs));
    for i = 1:length(locs)
        count_zeroes = 0;
        if i<length(locs)
            next_th=locs(i+1)-locs(i);
        else
            next_th=length(signal)-locs(i);
        end 
        for j = 1:next_th % Find zero-crossings in the 40 samples after the artifact
            if (signal(locs(i)+j)*signal(locs(i)+j+1)) < 0
                count_zeroes = count_zeroes + 1; 
            end
            if count_zeroes == 2
                count_zeroes = 0; 
                Mwavestart(i) = locs(i) + j; 
                break; % exit the loop once M wave start is found
            end 
        end
    end
end

% Function to build the Mwaves from the starting points computed in the
% previous function
function Mwaves = buildMwave(Mwavestart, duration, signal)
    Mwaves1 = [];
    for i = 1:length(Mwavestart)
        Mwaves(i, :) = signal(Mwavestart(i):Mwavestart(i)+duration);
    end
end

 